/**
 * Creche YAML
 * This is Vivos Creche API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: smulhall79@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AistearFramework } from '../model/aistearFramework';
import { ChildClassData } from '../model/childClassData';
import { Ingredient } from '../model/ingredient';
import { Meal } from '../model/meal';
import { Menu } from '../model/menu';
import { Observation } from '../model/observation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ClassroomService {

    protected basePath = 'http://api-staging.childcareinnovations.com/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add Child Data Entry
     * 
     * @param user 
     * @param locationId 
     * @param message 
     * @param children 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addChildEntry(user: string, locationId: number, message: ChildClassData, children: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<ChildClassData>;
    public addChildEntry(user: string, locationId: number, message: ChildClassData, children: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChildClassData>>;
    public addChildEntry(user: string, locationId: number, message: ChildClassData, children: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChildClassData>>;
    public addChildEntry(user: string, locationId: number, message: ChildClassData, children: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling addChildEntry.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling addChildEntry.');
        }
        if (message === null || message === undefined) {
            throw new Error('Required parameter message was null or undefined when calling addChildEntry.');
        }
        if (children === null || children === undefined) {
            throw new Error('Required parameter children was null or undefined when calling addChildEntry.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (children) {
            queryParameters = queryParameters.set('children', children.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ChildClassData>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/class`,
            message,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add Ingredient
     * 
     * @param user 
     * @param locationId 
     * @param ingredient 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addIngredient(user: string, locationId: number, ingredient: Ingredient, observe?: 'body', reportProgress?: boolean): Observable<Ingredient>;
    public addIngredient(user: string, locationId: number, ingredient: Ingredient, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ingredient>>;
    public addIngredient(user: string, locationId: number, ingredient: Ingredient, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ingredient>>;
    public addIngredient(user: string, locationId: number, ingredient: Ingredient, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling addIngredient.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling addIngredient.');
        }
        if (ingredient === null || ingredient === undefined) {
            throw new Error('Required parameter ingredient was null or undefined when calling addIngredient.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Ingredient>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/ingredients`,
            ingredient,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add Meal
     * 
     * @param user 
     * @param locationId 
     * @param message 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addMeal(user: string, locationId: number, message: Meal, observe?: 'body', reportProgress?: boolean): Observable<Meal>;
    public addMeal(user: string, locationId: number, message: Meal, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Meal>>;
    public addMeal(user: string, locationId: number, message: Meal, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Meal>>;
    public addMeal(user: string, locationId: number, message: Meal, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling addMeal.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling addMeal.');
        }
        if (message === null || message === undefined) {
            throw new Error('Required parameter message was null or undefined when calling addMeal.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Meal>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/meals`,
            message,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add Menu
     * 
     * @param user 
     * @param locationId 
     * @param message 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addMenu(user: string, locationId: number, message: Menu, observe?: 'body', reportProgress?: boolean): Observable<Menu>;
    public addMenu(user: string, locationId: number, message: Menu, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Menu>>;
    public addMenu(user: string, locationId: number, message: Menu, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Menu>>;
    public addMenu(user: string, locationId: number, message: Menu, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling addMenu.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling addMenu.');
        }
        if (message === null || message === undefined) {
            throw new Error('Required parameter message was null or undefined when calling addMenu.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Menu>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/menus`,
            message,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add Observation
     * 
     * @param user 
     * @param locationId 
     * @param message 
     * @param children 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addObservations(user: string, locationId: number, message: Observation, children?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addObservations(user: string, locationId: number, message: Observation, children?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addObservations(user: string, locationId: number, message: Observation, children?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addObservations(user: string, locationId: number, message: Observation, children?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling addObservations.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling addObservations.');
        }
        if (message === null || message === undefined) {
            throw new Error('Required parameter message was null or undefined when calling addObservations.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (children) {
            queryParameters = queryParameters.set('children', children.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/observations`,
            message,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * delete child data entry
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteChildEntry(user: string, locationId: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteChildEntry(user: string, locationId: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteChildEntry(user: string, locationId: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteChildEntry(user: string, locationId: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling deleteChildEntry.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling deleteChildEntry.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteChildEntry.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/class/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Ingredient
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteIngredient(user: string, locationId: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteIngredient(user: string, locationId: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteIngredient(user: string, locationId: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteIngredient(user: string, locationId: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling deleteIngredient.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling deleteIngredient.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteIngredient.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/ingredients/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Meal
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMeal(user: string, locationId: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteMeal(user: string, locationId: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteMeal(user: string, locationId: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteMeal(user: string, locationId: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling deleteMeal.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling deleteMeal.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteMeal.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/meal/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Menu
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMenu(user: string, locationId: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteMenu(user: string, locationId: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteMenu(user: string, locationId: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteMenu(user: string, locationId: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling deleteMenu.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling deleteMenu.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteMenu.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/menu/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Observation
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteObservation(user: string, locationId: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteObservation(user: string, locationId: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteObservation(user: string, locationId: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteObservation(user: string, locationId: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling deleteObservation.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling deleteObservation.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteObservation.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/observations/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get child data entries
     * 
     * @param user 
     * @param locationId 
     * @param children 
     * @param startTime 
     * @param endTime 
     * @param type 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChildEntries(user: string, locationId: number, children: Array<number>, startTime?: string, endTime?: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ChildClassData>>;
    public getChildEntries(user: string, locationId: number, children: Array<number>, startTime?: string, endTime?: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChildClassData>>>;
    public getChildEntries(user: string, locationId: number, children: Array<number>, startTime?: string, endTime?: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChildClassData>>>;
    public getChildEntries(user: string, locationId: number, children: Array<number>, startTime?: string, endTime?: string, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getChildEntries.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getChildEntries.');
        }
        if (children === null || children === undefined) {
            throw new Error('Required parameter children was null or undefined when calling getChildEntries.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (children) {
            queryParameters = queryParameters.set('children', children.join(COLLECTION_FORMATS['csv']));
        }
        if (startTime !== undefined) {
            queryParameters = queryParameters.set('startTime', <any>startTime);
        }
        if (endTime !== undefined) {
            queryParameters = queryParameters.set('endTime', <any>endTime);
        }
        if (type !== undefined) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<ChildClassData>>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/class`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get child data entries
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChildEntry(user: string, locationId: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ChildClassData>>;
    public getChildEntry(user: string, locationId: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChildClassData>>>;
    public getChildEntry(user: string, locationId: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChildClassData>>>;
    public getChildEntry(user: string, locationId: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getChildEntry.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getChildEntry.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getChildEntry.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<ChildClassData>>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/class/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get observations
     * 
     * @param user 
     * @param locationId 
     * @param startTime 
     * @param endTime 
     * @param children 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChildObservations(user: string, locationId: number, startTime?: string, endTime?: string, children?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<Observation>>;
    public getChildObservations(user: string, locationId: number, startTime?: string, endTime?: string, children?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Observation>>>;
    public getChildObservations(user: string, locationId: number, startTime?: string, endTime?: string, children?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Observation>>>;
    public getChildObservations(user: string, locationId: number, startTime?: string, endTime?: string, children?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getChildObservations.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getChildObservations.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startTime !== undefined) {
            queryParameters = queryParameters.set('startTime', <any>startTime);
        }
        if (endTime !== undefined) {
            queryParameters = queryParameters.set('endTime', <any>endTime);
        }
        if (children) {
            queryParameters = queryParameters.set('children', children.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Observation>>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/observations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get observations
     * 
     * @param user 
     * @param locationId 
     * @param groupId 
     * @param startTime 
     * @param endTime 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGroupObservations(user: string, locationId: number, groupId: number, startTime?: string, endTime?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Observation>>;
    public getGroupObservations(user: string, locationId: number, groupId: number, startTime?: string, endTime?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Observation>>>;
    public getGroupObservations(user: string, locationId: number, groupId: number, startTime?: string, endTime?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Observation>>>;
    public getGroupObservations(user: string, locationId: number, groupId: number, startTime?: string, endTime?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getGroupObservations.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getGroupObservations.');
        }
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling getGroupObservations.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startTime !== undefined) {
            queryParameters = queryParameters.set('startTime', <any>startTime);
        }
        if (endTime !== undefined) {
            queryParameters = queryParameters.set('endTime', <any>endTime);
        }
        if (groupId !== undefined) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Observation>>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/observations/group`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Ingredients
     * 
     * @param user 
     * @param locationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIngredients(user: string, locationId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Ingredient>>;
    public getIngredients(user: string, locationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ingredient>>>;
    public getIngredients(user: string, locationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ingredient>>>;
    public getIngredients(user: string, locationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getIngredients.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getIngredients.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Ingredient>>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/ingredients`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Meals
     * 
     * @param user 
     * @param locationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMeals(user: string, locationId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Meal>>;
    public getMeals(user: string, locationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Meal>>>;
    public getMeals(user: string, locationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Meal>>>;
    public getMeals(user: string, locationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getMeals.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getMeals.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Meal>>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/meals`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get Menu
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMenuById(user: string, locationId: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<Menu>;
    public getMenuById(user: string, locationId: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Menu>>;
    public getMenuById(user: string, locationId: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Menu>>;
    public getMenuById(user: string, locationId: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getMenuById.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getMenuById.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMenuById.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Menu>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/menu/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get menu
     * 
     * @param user 
     * @param locationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMenus(user: string, locationId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Menu>>;
    public getMenus(user: string, locationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Menu>>>;
    public getMenus(user: string, locationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Menu>>>;
    public getMenus(user: string, locationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getMenus.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getMenus.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Menu>>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/menus`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get Observation
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getObservation(user: string, locationId: number, id: number, observe?: 'body', reportProgress?: boolean): Observable<Observation>;
    public getObservation(user: string, locationId: number, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Observation>>;
    public getObservation(user: string, locationId: number, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Observation>>;
    public getObservation(user: string, locationId: number, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getObservation.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getObservation.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getObservation.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Observation>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/observations/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get Aister tags
     * 
     * @param user 
     * @param locationId 
     * @param type 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTags(user: string, locationId: number, type: string, observe?: 'body', reportProgress?: boolean): Observable<AistearFramework>;
    public getTags(user: string, locationId: number, type: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AistearFramework>>;
    public getTags(user: string, locationId: number, type: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AistearFramework>>;
    public getTags(user: string, locationId: number, type: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getTags.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling getTags.');
        }
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getTags.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (type !== undefined) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<AistearFramework>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/observation-tags`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add Child Data Entry
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param message 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateChildEntry(user: string, locationId: number, id: number, message: ChildClassData, observe?: 'body', reportProgress?: boolean): Observable<ChildClassData>;
    public updateChildEntry(user: string, locationId: number, id: number, message: ChildClassData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChildClassData>>;
    public updateChildEntry(user: string, locationId: number, id: number, message: ChildClassData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChildClassData>>;
    public updateChildEntry(user: string, locationId: number, id: number, message: ChildClassData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling updateChildEntry.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateChildEntry.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateChildEntry.');
        }
        if (message === null || message === undefined) {
            throw new Error('Required parameter message was null or undefined when calling updateChildEntry.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<ChildClassData>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/class/${encodeURIComponent(String(id))}`,
            message,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Ingredient
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param ingredient 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateIngredient(user: string, locationId: number, id: number, ingredient: Ingredient, observe?: 'body', reportProgress?: boolean): Observable<Ingredient>;
    public updateIngredient(user: string, locationId: number, id: number, ingredient: Ingredient, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ingredient>>;
    public updateIngredient(user: string, locationId: number, id: number, ingredient: Ingredient, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ingredient>>;
    public updateIngredient(user: string, locationId: number, id: number, ingredient: Ingredient, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling updateIngredient.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateIngredient.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateIngredient.');
        }
        if (ingredient === null || ingredient === undefined) {
            throw new Error('Required parameter ingredient was null or undefined when calling updateIngredient.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<Ingredient>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/ingredients/${encodeURIComponent(String(id))}`,
            ingredient,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Meal
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param meal 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateMeal(user: string, locationId: number, id: number, meal: Meal, observe?: 'body', reportProgress?: boolean): Observable<Meal>;
    public updateMeal(user: string, locationId: number, id: number, meal: Meal, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Meal>>;
    public updateMeal(user: string, locationId: number, id: number, meal: Meal, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Meal>>;
    public updateMeal(user: string, locationId: number, id: number, meal: Meal, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling updateMeal.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateMeal.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateMeal.');
        }
        if (meal === null || meal === undefined) {
            throw new Error('Required parameter meal was null or undefined when calling updateMeal.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<Meal>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/meal/${encodeURIComponent(String(id))}`,
            meal,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Menu
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param menu 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateMenu(user: string, locationId: number, id: number, menu: Menu, observe?: 'body', reportProgress?: boolean): Observable<Menu>;
    public updateMenu(user: string, locationId: number, id: number, menu: Menu, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Menu>>;
    public updateMenu(user: string, locationId: number, id: number, menu: Menu, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Menu>>;
    public updateMenu(user: string, locationId: number, id: number, menu: Menu, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling updateMenu.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateMenu.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateMenu.');
        }
        if (menu === null || menu === undefined) {
            throw new Error('Required parameter menu was null or undefined when calling updateMenu.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<Menu>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/menu/${encodeURIComponent(String(id))}`,
            menu,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Observation
     * 
     * @param user 
     * @param locationId 
     * @param id 
     * @param message 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateObservation(user: string, locationId: number, id: number, message: Observation, observe?: 'body', reportProgress?: boolean): Observable<Observation>;
    public updateObservation(user: string, locationId: number, id: number, message: Observation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Observation>>;
    public updateObservation(user: string, locationId: number, id: number, message: Observation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Observation>>;
    public updateObservation(user: string, locationId: number, id: number, message: Observation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling updateObservation.');
        }
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling updateObservation.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateObservation.');
        }
        if (message === null || message === undefined) {
            throw new Error('Required parameter message was null or undefined when calling updateObservation.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<Observation>(`${this.basePath}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(locationId))}/observations/${encodeURIComponent(String(id))}`,
            message,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
