/* tslint:disable */
{{>licenseInfo}}
import { Inject, Injectable, Optional }                      from '@angular/core';
import {RequestMethod} from '@angular/http';
import {HttpClient, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../models/models';
import { COLLECTION_FORMATS }                     from '../variables';

{{#operations}}

  {{#description}}
    /**
    * {{&description}}
    */
  {{/description}}
  @Injectable()
  export class {{classname}} {
  protected basePath = '{{{basePath}}}';
  protected apiKey: string;
  protected accessToken: string;

  constructor(protected http: HttpClient) {

  }

  public setApiKey(apiKey:string) {
  this.apiKey = apiKey;
  }

  public setToken(token:string) {
  this.accessToken = token;
  }

  public setBasePath(basePath:string) {
  this.basePath = basePath;
  }

  {{#operation}}
    /**
    * {{summary}}
    * {{notes}}
    {{#allParams}}* @param {{paramName}} {{description}}
    {{/allParams}}*/
    {{^isResponseFile}}
      public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}extraHttpRequestParams?: any): Observable<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
    {{/isResponseFile}}
    {{#isResponseFile}}
      public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}extraHttpRequestParams?: any): Observable<{{#returnType}}{{{returnType}}}|undefined{{/returnType}}{{^returnType}}{}{{/returnType}}> {
    {{/isResponseFile}}
    return this.{{nickname}}WithHttpInfo({{#allParams}}{{paramName}}, {{/allParams}}extraHttpRequestParams)
    .map((response: HttpResponse<any>) => {
      if (response.status === 204) {
      return undefined;
      } else {
    {{^isResponseFile}}
        return response.body || {};
    {{/isResponseFile}}
    {{#isResponseFile}}
        return response.body;
    {{/isResponseFile}}
      }
      });
      }

  {{/operation}}

  {{#operation}}
      /**
      * {{summary}}
      * {{notes}}
    {{#allParams}}* @param {{paramName}} {{description}}
    {{/allParams}}*/
      public {{nickname}}WithHttpInfo({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}extraHttpRequestParams?: any): Observable<HttpResponse<any>> {
      const path = this.basePath + '{{{path}}}'{{#pathParams}}
        .replace('${' + '{{baseName}}' + '}', String({{paramName}})){{/pathParams}};

      let queryParameters = new HttpParams();

      let headers = new HttpHeaders({
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      });

      if (this.accessToken) {
        headers = headers.append('Authorization', this.accessToken);
      }

      if (this.apiKey) {
        headers = headers.append('Api-Key', this.apiKey);
      }

    {{#allParams}}
      {{#required}}
          // verify required parameter '{{paramName}}' is not null or undefined
          if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
          }
      {{/required}}
    {{/allParams}}
    {{#queryParams}}
      {{#isListContainer}}
          if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
          {{paramName}}.forEach((element) => {
            queryParameters = queryParameters.append('{{baseName}}', <any>element);
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            queryParameters = queryParameters.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        {{/isCollectionFormatMulti}}
          }
      {{/isListContainer}}
      {{^isListContainer}}
          if ({{paramName}} !== undefined) {
        {{#isDateTime}}
            queryParameters = queryParameters.set('{{baseName}}', <any>{{paramName}}.toISOString());
        {{/isDateTime}}
        {{^isDateTime}}
            queryParameters = queryParameters.set('{{baseName}}', <any>{{paramName}});
        {{/isDateTime}}
          }
      {{/isListContainer}}

    {{/queryParams}}
    {{#headerParams}}
      {{#isListContainer}}
          if ({{paramName}}) {
          headers = headers.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
          }
      {{/isListContainer}}
      {{^isListContainer}}
          if ({{paramName}} !== undefined && {{paramName}} !== null) {
          headers = headers.set('{{baseName}}', String({{paramName}}));
          }
      {{/isListContainer}}

    {{/headerParams}}
    {{#hasFormParams}}
        // to determine the Content-Type header
        let consumes: string[] = [
      {{#consumes}}
          '{{{mediaType}}}'{{#hasMore}},{{/hasMore}}
      {{/consumes}}
        ];
        let canConsumeForm = this.canConsumeForm(consumes);
        let useForm = false;
      {{#formParams}}
        {{#isFile}}
            headers = headers.delete('Content-Type'); // needed for FormData to generate that header properly
            useForm = canConsumeForm;
        {{/isFile}}
      {{/formParams}}
        let formParams = new (useForm ? FormData : HttpParams as any)() as {
        set(param: string, value: any): void;
        };
    {{/hasFormParams}}

      // to determine the Accept header
      let produces: string[] = [
    {{#produces}}
        '{{{mediaType}}}'{{#hasMore}},{{/hasMore}}
    {{/produces}}
      ];

    {{#bodyParam}}

    {{/bodyParam}}
    {{#formParams}}
      {{#isListContainer}}
          if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
          {{paramName}}.forEach((element) => {
            formParams.append('{{baseName}}', <any>element);
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            formParams.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        {{/isCollectionFormatMulti}}
          }
      {{/isListContainer}}
      {{^isListContainer}}
          if ({{paramName}} !== undefined) {
          formParams.set('{{baseName}}', <any>{{paramName}});
          }
      {{/isListContainer}}

    {{/formParams}}
      return this.http.request(this.requestMethodToString({{httpMethod}}), path, {
      headers: headers,
      observe: 'response',
      responseType: 'json',
    {{#isResponseFile}}
        ...{responseType: 'blob'},
    {{/isResponseFile}}
    {{#bodyParam}}
        body: {{paramName}} == null ? '' : JSON.stringify({{paramName}}), // https://github.com/angular/angular/issues/10612
    {{/bodyParam}}
    {{#hasFormParams}}
        body: useForm ? formParams : formParams.toString(),
    {{/hasFormParams}}
      params: queryParameters,
      }) as any; // here is some issue with casting because of the spread operator
      }

  {{/operation}}

    /**
    * @param consumes string[] mime-types
    * @return true: consumes contains 'multipart/form-data', false: otherwise
    */
    private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (let consume of consumes) {
    if (form === consume) {
    return true;
    }
    }
    return false;
    }


    private searchToObject(): {[key :string]: string} {
    let pairs = window.location.search.substring(1).split("&"),
    obj = {},
    pair,
    i;

    for ( i in pairs ) {
    if ( pairs[i] === "" ) continue;

    pair = pairs[i].split("=");
    obj[ decodeURIComponent( pair[0] ) ] = decodeURIComponent( pair[1] );
    }

    return obj;
    }

    /**
    * Converts RequestMethod to string
    * @param {RequestMethod} method
    * @returns {string}
    */
    protected requestMethodToString(method: RequestMethod): string {
    switch (method) {
    case RequestMethod.Delete:
    return 'DELETE';

    case RequestMethod.Get:
    return 'GET';

    case RequestMethod.Head:
    return 'HEAD';

    case RequestMethod.Options:
    return 'OPTIONS';

    case RequestMethod.Patch:
    return 'PATCH';

    case RequestMethod.Post:
    return 'POST';

    case RequestMethod.Put:
    return 'PUT';

    default:
    throw 'Unknown method: ' + method;
    }
    }
    }
{{/operations}}
